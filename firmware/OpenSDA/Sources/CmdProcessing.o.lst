   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"CmdProcessing.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	pressed
  19              		.section	.bss.pressed,"aw",%nobits
  22              	pressed:
  23 0000 00       		.space	1
  24              		.global	runMotor
  25              		.section	.bss.runMotor,"aw",%nobits
  28              	runMotor:
  29 0000 00       		.space	1
  30              		.comm	statusBuffer,300,4
  31              		.section	.text.commandLoop,"ax",%progbits
  32              		.align	2
  33              		.global	commandLoop
  34              		.thumb
  35              		.thumb_func
  37              	commandLoop:
  38              	.LFB0:
  39              		.file 1 "../Sources/CmdProcessing.c"
   1:../Sources/CmdProcessing.c **** 
   2:../Sources/CmdProcessing.c **** #include <string.h>
   3:../Sources/CmdProcessing.c **** #include "Common.h"
   4:../Sources/CmdProcessing.c **** #include "enums.h"
   5:../Sources/CmdProcessing.c **** 
   6:../Sources/CmdProcessing.c **** //#include "ARM.h"
   7:../Sources/CmdProcessing.c **** #include "USB.h"
   8:../Sources/CmdProcessing.c **** #include "CmdProcessing.h"
   9:../Sources/CmdProcessing.c **** #include "BLDC.h"
  10:../Sources/CmdProcessing.c **** #include "PE_Types.h"
  11:../Sources/CmdProcessing.c **** uint8_t pressed = 0;
  12:../Sources/CmdProcessing.c **** bool runMotor = 0;
  13:../Sources/CmdProcessing.c **** 
  14:../Sources/CmdProcessing.c **** uint8_t statusBuffer[300];
  15:../Sources/CmdProcessing.c **** 
  16:../Sources/CmdProcessing.c **** void SendStatus(void);
  17:../Sources/CmdProcessing.c **** 
  18:../Sources/CmdProcessing.c **** void commandLoop(void) {
  40              		.loc 1 18 0
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 0
  43              		@ frame_needed = 1, uses_anonymous_args = 0
  44 0000 80B5     		push	{r7, lr}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 14, -4
  49 0002 00AF     		add	r7, sp, #0
  50              	.LCFI1:
  51              		.cfi_def_cfa_register 7
  52 0004 00E0     		b	.L11
  53              	.L12:
  19:../Sources/CmdProcessing.c **** // Define to discard commands at random for command retry testing
  20:../Sources/CmdProcessing.c **** //#define TESTDISCARD
  21:../Sources/CmdProcessing.c **** 
  22:../Sources/CmdProcessing.c ****    for(;;) {
  23:../Sources/CmdProcessing.c **** //	   BLDC_Update();
  24:../Sources/CmdProcessing.c ****       (void)receiveUSBCommand( 64, commandBuffer ); // this may take a *long* time...
  25:../Sources/CmdProcessing.c ****       
  26:../Sources/CmdProcessing.c ****       switch(commandBuffer[0])
  27:../Sources/CmdProcessing.c ****       {
  28:../Sources/CmdProcessing.c ****       case CMD_NOP: // do nothing
  29:../Sources/CmdProcessing.c ****     	  break;
  30:../Sources/CmdProcessing.c ****       case CMD_IDLE: // shut everything down
  31:../Sources/CmdProcessing.c ****     	  BLDC_Idle(); // this disables the Hall interrupts and the H-bridge
  32:../Sources/CmdProcessing.c ****     	  break;
  33:../Sources/CmdProcessing.c ****       case CMD_RUN:
  34:../Sources/CmdProcessing.c ****     	  BLDC_Init();
  35:../Sources/CmdProcessing.c ****     	  break;
  36:../Sources/CmdProcessing.c ****     	  
  37:../Sources/CmdProcessing.c ****       case CMD_VELOCITY:
  38:../Sources/CmdProcessing.c ****     	  if(commandBuffer[1] == 0 || commandBuffer[1]==1)
  39:../Sources/CmdProcessing.c ****     	  {
  40:../Sources/CmdProcessing.c ****     		  BLDC_Direction = commandBuffer[1];
  41:../Sources/CmdProcessing.c ****     		  memcpy(&BLDC_Speed, &commandBuffer[2], sizeof(U16));
  42:../Sources/CmdProcessing.c ****     	  }
  43:../Sources/CmdProcessing.c ****     	  break;
  44:../Sources/CmdProcessing.c ****       case CMD_STATUSREQ:
  45:../Sources/CmdProcessing.c ****     	  SendStatus();
  46:../Sources/CmdProcessing.c ****       }
  47:../Sources/CmdProcessing.c **** 
  48:../Sources/CmdProcessing.c ****    }
  54              		.loc 1 48 0
  55 0006 00BF     		nop
  56              	.L11:
  24:../Sources/CmdProcessing.c ****       (void)receiveUSBCommand( 64, commandBuffer ); // this may take a *long* time...
  57              		.loc 1 24 0
  58 0008 4FF04000 		mov	r0, #64
  59 000c 40F20001 		movw	r1, #:lower16:commandBuffer
  60 0010 C0F20001 		movt	r1, #:upper16:commandBuffer
  61 0014 FFF7FEFF 		bl	receiveUSBCommand
  26:../Sources/CmdProcessing.c ****       switch(commandBuffer[0])
  62              		.loc 1 26 0
  63 0018 40F20003 		movw	r3, #:lower16:commandBuffer
  64 001c C0F20003 		movt	r3, #:upper16:commandBuffer
  65 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  66 0022 042B     		cmp	r3, #4
  67 0024 EFD8     		bhi	.L12
  68 0026 01A2     		adr	r2, .L8
  69 0028 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  70              		.align	2
  71              	.L8:
  72 002c 97000000 		.word	.L13+1
  73 0030 41000000 		.word	.L4+1
  74 0034 47000000 		.word	.L5+1
  75 0038 91000000 		.word	.L6+1
  76 003c 4D000000 		.word	.L7+1
  77              	.L4:
  31:../Sources/CmdProcessing.c ****     	  BLDC_Idle(); // this disables the Hall interrupts and the H-bridge
  78              		.loc 1 31 0
  79 0040 FFF7FEFF 		bl	BLDC_Idle
  32:../Sources/CmdProcessing.c ****     	  break;
  80              		.loc 1 32 0
  81 0044 2AE0     		b	.L2
  82              	.L5:
  34:../Sources/CmdProcessing.c ****     	  BLDC_Init();
  83              		.loc 1 34 0
  84 0046 FFF7FEFF 		bl	BLDC_Init
  35:../Sources/CmdProcessing.c ****     	  break;
  85              		.loc 1 35 0
  86 004a 27E0     		b	.L2
  87              	.L7:
  38:../Sources/CmdProcessing.c ****     	  if(commandBuffer[1] == 0 || commandBuffer[1]==1)
  88              		.loc 1 38 0
  89 004c 40F20003 		movw	r3, #:lower16:commandBuffer
  90 0050 C0F20003 		movt	r3, #:upper16:commandBuffer
  91 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  92 0056 002B     		cmp	r3, #0
  93 0058 06D0     		beq	.L9
  38:../Sources/CmdProcessing.c ****     	  if(commandBuffer[1] == 0 || commandBuffer[1]==1)
  94              		.loc 1 38 0 is_stmt 0
  95 005a 40F20003 		movw	r3, #:lower16:commandBuffer
  96 005e C0F20003 		movt	r3, #:upper16:commandBuffer
  97 0062 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  98 0064 012B     		cmp	r3, #1
  99 0066 18D1     		bne	.L14
 100              	.L9:
  40:../Sources/CmdProcessing.c ****     		  BLDC_Direction = commandBuffer[1];
 101              		.loc 1 40 0 is_stmt 1
 102 0068 40F20003 		movw	r3, #:lower16:commandBuffer
 103 006c C0F20003 		movt	r3, #:upper16:commandBuffer
 104 0070 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 105 0072 40F20003 		movw	r3, #:lower16:BLDC_Direction
 106 0076 C0F20003 		movt	r3, #:upper16:BLDC_Direction
 107 007a 1A70     		strb	r2, [r3, #0]
  41:../Sources/CmdProcessing.c ****     		  memcpy(&BLDC_Speed, &commandBuffer[2], sizeof(U16));
 108              		.loc 1 41 0
 109 007c 40F20000 		movw	r0, #:lower16:BLDC_Speed
 110 0080 C0F20000 		movt	r0, #:upper16:BLDC_Speed
 111 0084 0649     		ldr	r1, .L15
 112 0086 4FF00202 		mov	r2, #2
 113 008a FFF7FEFF 		bl	memcpy
  43:../Sources/CmdProcessing.c ****     	  break;
 114              		.loc 1 43 0
 115 008e 04E0     		b	.L14
 116              	.L6:
  45:../Sources/CmdProcessing.c ****     	  SendStatus();
 117              		.loc 1 45 0
 118 0090 FFF7FEFF 		bl	SendStatus
 119              		.loc 1 48 0
 120 0094 B7E7     		b	.L12
 121              	.L13:
  29:../Sources/CmdProcessing.c ****     	  break;
 122              		.loc 1 29 0
 123 0096 00BF     		nop
 124 0098 00E0     		b	.L2
 125              	.L14:
  43:../Sources/CmdProcessing.c ****     	  break;
 126              		.loc 1 43 0
 127 009a 00BF     		nop
 128              	.L2:
 129              		.loc 1 48 0
 130 009c B3E7     		b	.L12
 131              	.L16:
 132 009e 00BF     		.align	2
 133              	.L15:
 134 00a0 02000000 		.word	commandBuffer+2
 135              		.cfi_endproc
 136              	.LFE0:
 138              		.section	.text.SetStatus,"ax",%progbits
 139              		.align	2
 140              		.global	SetStatus
 141              		.thumb
 142              		.thumb_func
 144              	SetStatus:
 145              	.LFB1:
  49:../Sources/CmdProcessing.c **** }
  50:../Sources/CmdProcessing.c **** 
  51:../Sources/CmdProcessing.c **** void SetStatus(U8 status)
  52:../Sources/CmdProcessing.c **** {
 146              		.loc 1 52 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 8
 149              		@ frame_needed = 1, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151 0000 80B4     		push	{r7}
 152              	.LCFI2:
 153              		.cfi_def_cfa_offset 4
 154              		.cfi_offset 7, -4
 155 0002 83B0     		sub	sp, sp, #12
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 16
 158 0004 00AF     		add	r7, sp, #0
 159              	.LCFI4:
 160              		.cfi_def_cfa_register 7
 161 0006 0346     		mov	r3, r0
 162 0008 FB71     		strb	r3, [r7, #7]
  53:../Sources/CmdProcessing.c **** 	
  54:../Sources/CmdProcessing.c **** }
 163              		.loc 1 54 0
 164 000a 07F10C07 		add	r7, r7, #12
 165 000e BD46     		mov	sp, r7
 166 0010 80BC     		pop	{r7}
 167 0012 7047     		bx	lr
 168              		.cfi_endproc
 169              	.LFE1:
 171              		.section	.text.SendStatus,"ax",%progbits
 172              		.align	2
 173              		.global	SendStatus
 174              		.thumb
 175              		.thumb_func
 177              	SendStatus:
 178              	.LFB2:
  55:../Sources/CmdProcessing.c **** 
  56:../Sources/CmdProcessing.c **** void SendStatus(void)
  57:../Sources/CmdProcessing.c **** {
 179              		.loc 1 57 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 1, uses_anonymous_args = 0
 183 0000 80B5     		push	{r7, lr}
 184              	.LCFI5:
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 7, -8
 187              		.cfi_offset 14, -4
 188 0002 00AF     		add	r7, sp, #0
 189              	.LCFI6:
 190              		.cfi_def_cfa_register 7
  58:../Sources/CmdProcessing.c **** 	  commandBuffer[0] = 0x81;
 191              		.loc 1 58 0
 192 0004 40F20003 		movw	r3, #:lower16:commandBuffer
 193 0008 C0F20003 		movt	r3, #:upper16:commandBuffer
 194 000c 4FF08102 		mov	r2, #129
 195 0010 1A70     		strb	r2, [r3, #0]
  59:../Sources/CmdProcessing.c **** 	  memcpy(&commandBuffer[1], &BLDC_CurrentPosition, sizeof(int32_t));
 196              		.loc 1 59 0
 197 0012 0F48     		ldr	r0, .L19
 198 0014 40F20001 		movw	r1, #:lower16:BLDC_CurrentPosition
 199 0018 C0F20001 		movt	r1, #:upper16:BLDC_CurrentPosition
 200 001c 4FF00402 		mov	r2, #4
 201 0020 FFF7FEFF 		bl	memcpy
  60:../Sources/CmdProcessing.c **** 	  sendUSBResponse( sizeof(int32_t)+1, commandBuffer );
 202              		.loc 1 60 0
 203 0024 4FF00500 		mov	r0, #5
 204 0028 40F20001 		movw	r1, #:lower16:commandBuffer
 205 002c C0F20001 		movt	r1, #:upper16:commandBuffer
 206 0030 FFF7FEFF 		bl	sendUSBResponse
  61:../Sources/CmdProcessing.c **** 	  pressed ^= 1;
 207              		.loc 1 61 0
 208 0034 40F20003 		movw	r3, #:lower16:pressed
 209 0038 C0F20003 		movt	r3, #:upper16:pressed
 210 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 211 003e 83F00103 		eor	r3, r3, #1
 212 0042 DAB2     		uxtb	r2, r3
 213 0044 40F20003 		movw	r3, #:lower16:pressed
 214 0048 C0F20003 		movt	r3, #:upper16:pressed
 215 004c 1A70     		strb	r2, [r3, #0]
  62:../Sources/CmdProcessing.c **** }
 216              		.loc 1 62 0
 217 004e 80BD     		pop	{r7, pc}
 218              	.L20:
 219              		.align	2
 220              	.L19:
 221 0050 01000000 		.word	commandBuffer+1
 222              		.cfi_endproc
 223              	.LFE2:
 225              		.text
 226              	.Letext0:
 227              		.file 2 "C:/Freescale/CW MCU v10.5/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 228              		.file 3 "C:/Users/Jay/Documents/MC2/Projects/UNL Rover/BLDCdriver/cw_workspace/USBDM_Kinetis_BLDC/
 229              		.file 4 "C:/Users/Jay/Documents/MC2/Projects/UNL Rover/BLDCdriver/cw_workspace/USBDM_Kinetis_BLDC/
 230              		.file 5 "C:/Users/Jay/Documents/MC2/Projects/UNL Rover/BLDCdriver/cw_workspace/USBDM_Kinetis_BLDC/
 231              		.file 6 "C:/Users/Jay/Documents/MC2/Projects/UNL Rover/BLDCdriver/cw_workspace/USBDM_Kinetis_BLDC/
 232              		.file 7 "C:/Users/Jay/Documents/MC2/Projects/UNL Rover/BLDCdriver/cw_workspace/USBDM_Kinetis_BLDC/
DEFINED SYMBOLS
                            *ABS*:00000000 CmdProcessing.c
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:22     .bss.pressed:00000000 pressed
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:23     .bss.pressed:00000000 $d
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:28     .bss.runMotor:00000000 runMotor
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:29     .bss.runMotor:00000000 $d
                            *COM*:0000012c statusBuffer
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:32     .text.commandLoop:00000000 $t
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:37     .text.commandLoop:00000000 commandLoop
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:72     .text.commandLoop:0000002c $d
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:79     .text.commandLoop:00000040 $t
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:177    .text.SendStatus:00000000 SendStatus
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:134    .text.commandLoop:000000a0 $d
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:139    .text.SetStatus:00000000 $t
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:144    .text.SetStatus:00000000 SetStatus
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:172    .text.SendStatus:00000000 $t
C:\Users\Jay\AppData\Local\Temp\ccSkpsCw.s:221    .text.SendStatus:00000050 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
commandBuffer
receiveUSBCommand
BLDC_Idle
BLDC_Init
BLDC_Direction
BLDC_Speed
memcpy
BLDC_CurrentPosition
sendUSBResponse
